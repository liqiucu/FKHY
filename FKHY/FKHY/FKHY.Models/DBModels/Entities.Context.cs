//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace FKHY.Models.DBModels
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DataAccess : DbContext
    {
        public DataAccess()
            : base("name=DataAccess")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AliPayIPN> AliPayIPNs { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<CashFlow> CashFlows { get; set; }
        public virtual DbSet<CashFlowStatu> CashFlowStatus { get; set; }
        public virtual DbSet<PaymentType> PaymentTypes { get; set; }
        public virtual DbSet<Trade> Trades { get; set; }
        public virtual DbSet<TradeType> TradeTypes { get; set; }
        public virtual DbSet<TradeTypeGroup> TradeTypeGroups { get; set; }
        public virtual DbSet<UserAccount> UserAccounts { get; set; }
        public virtual DbSet<UserBalance> UserBalances { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
    
        public virtual int alipay_trade_confirmed(Nullable<long> tradeId)
        {
            var tradeIdParameter = tradeId.HasValue ?
                new ObjectParameter("TradeId", tradeId) :
                new ObjectParameter("TradeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("alipay_trade_confirmed", tradeIdParameter);
        }
    
        public virtual int sp_clear()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_clear");
        }
    
        public virtual ObjectResult<sp_text_Result> sp_text(string text)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_text_Result>("sp_text", textParameter);
        }
    
        public virtual int txn_bind_bank_account(Nullable<long> userId, Nullable<int> userTypeId, string accountName, string accountNo, Nullable<int> bankId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("txn_bind_bank_account", userIdParameter, userTypeIdParameter, accountNameParameter, accountNoParameter, bankIdParameter);
        }
    
        public virtual ObjectResult<txn_cash_out_Result> txn_cash_out(Nullable<long> userId, Nullable<long> accountId, Nullable<decimal> amount)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<txn_cash_out_Result>("txn_cash_out", userIdParameter, accountIdParameter, amountParameter);
        }
    
        public virtual int txn_cash_out_confirmed(Nullable<long> cashFlowId, string externalCashFlowNumber, string note)
        {
            var cashFlowIdParameter = cashFlowId.HasValue ?
                new ObjectParameter("CashFlowId", cashFlowId) :
                new ObjectParameter("CashFlowId", typeof(long));
    
            var externalCashFlowNumberParameter = externalCashFlowNumber != null ?
                new ObjectParameter("ExternalCashFlowNumber", externalCashFlowNumber) :
                new ObjectParameter("ExternalCashFlowNumber", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("txn_cash_out_confirmed", cashFlowIdParameter, externalCashFlowNumberParameter, noteParameter);
        }
    
        public virtual int txn_cash_out_rejected(Nullable<long> cashFlowId, string note)
        {
            var cashFlowIdParameter = cashFlowId.HasValue ?
                new ObjectParameter("CashFlowId", cashFlowId) :
                new ObjectParameter("CashFlowId", typeof(long));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("txn_cash_out_rejected", cashFlowIdParameter, noteParameter);
        }
    
        public virtual int txn_deposit_unfreeze(Nullable<long> tradeId, Nullable<long> userId, Nullable<int> userTypeId)
        {
            var tradeIdParameter = tradeId.HasValue ?
                new ObjectParameter("TradeId", tradeId) :
                new ObjectParameter("TradeId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("txn_deposit_unfreeze", tradeIdParameter, userIdParameter, userTypeIdParameter);
        }
    
        public virtual int txn_get_bill_list(Nullable<long> userId, Nullable<int> userTypeId, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("txn_get_bill_list", userIdParameter, userTypeIdParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<txn_get_user_account_list_Result> txn_get_user_account_list(Nullable<long> userId, Nullable<int> userTypeId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<txn_get_user_account_list_Result>("txn_get_user_account_list", userIdParameter, userTypeIdParameter);
        }
    
        public virtual int txn_remove_user_account(Nullable<long> userId, Nullable<long> accountId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("txn_remove_user_account", userIdParameter, accountIdParameter);
        }
    
        public virtual int txn_trade_balance(Nullable<long> userId, Nullable<int> userTypeId, Nullable<int> tradeTypeId, Nullable<long> orderId, Nullable<decimal> payment, string note, string pasword)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var tradeTypeIdParameter = tradeTypeId.HasValue ?
                new ObjectParameter("TradeTypeId", tradeTypeId) :
                new ObjectParameter("TradeTypeId", typeof(int));
    
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(long));
    
            var paymentParameter = payment.HasValue ?
                new ObjectParameter("Payment", payment) :
                new ObjectParameter("Payment", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var paswordParameter = pasword != null ?
                new ObjectParameter("Pasword", pasword) :
                new ObjectParameter("Pasword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("txn_trade_balance", userIdParameter, userTypeIdParameter, tradeTypeIdParameter, orderIdParameter, paymentParameter, noteParameter, paswordParameter);
        }
    
        public virtual int txn_trade_cash_paid(Nullable<long> userId, Nullable<int> userTypeId, Nullable<int> tradeTypeId, Nullable<long> orderId, Nullable<decimal> payment, string note)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var tradeTypeIdParameter = tradeTypeId.HasValue ?
                new ObjectParameter("TradeTypeId", tradeTypeId) :
                new ObjectParameter("TradeTypeId", typeof(int));
    
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(long));
    
            var paymentParameter = payment.HasValue ?
                new ObjectParameter("Payment", payment) :
                new ObjectParameter("Payment", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("txn_trade_cash_paid", userIdParameter, userTypeIdParameter, tradeTypeIdParameter, orderIdParameter, paymentParameter, noteParameter);
        }
    
        public virtual int txn_trade_paid(Nullable<long> userId, Nullable<int> userTypeId, Nullable<long> tradeId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var tradeIdParameter = tradeId.HasValue ?
                new ObjectParameter("TradeId", tradeId) :
                new ObjectParameter("TradeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("txn_trade_paid", userIdParameter, userTypeIdParameter, tradeIdParameter);
        }
    
        public virtual int txn_trade_pay_user(Nullable<long> tradeId)
        {
            var tradeIdParameter = tradeId.HasValue ?
                new ObjectParameter("TradeId", tradeId) :
                new ObjectParameter("TradeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("txn_trade_pay_user", tradeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> txn_trade_payment_received(Nullable<long> tradeId, Nullable<long> userId, Nullable<int> userTypeId, Nullable<decimal> amount, string note)
        {
            var tradeIdParameter = tradeId.HasValue ?
                new ObjectParameter("TradeId", tradeId) :
                new ObjectParameter("TradeId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("txn_trade_payment_received", tradeIdParameter, userIdParameter, userTypeIdParameter, amountParameter, noteParameter);
        }
    
        public virtual int txn_trade_payment_received_frozen(Nullable<long> tradeId, Nullable<long> userId, Nullable<int> userTypeId, Nullable<decimal> amount, string note)
        {
            var tradeIdParameter = tradeId.HasValue ?
                new ObjectParameter("TradeId", tradeId) :
                new ObjectParameter("TradeId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("txn_trade_payment_received_frozen", tradeIdParameter, userIdParameter, userTypeIdParameter, amountParameter, noteParameter);
        }
    
        public virtual int txn_trade_payment_refund(Nullable<long> cashFlowId, Nullable<long> refundUserId, Nullable<int> refundUserTypeId, string note)
        {
            var cashFlowIdParameter = cashFlowId.HasValue ?
                new ObjectParameter("CashFlowId", cashFlowId) :
                new ObjectParameter("CashFlowId", typeof(long));
    
            var refundUserIdParameter = refundUserId.HasValue ?
                new ObjectParameter("RefundUserId", refundUserId) :
                new ObjectParameter("RefundUserId", typeof(long));
    
            var refundUserTypeIdParameter = refundUserTypeId.HasValue ?
                new ObjectParameter("RefundUserTypeId", refundUserTypeId) :
                new ObjectParameter("RefundUserTypeId", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("txn_trade_payment_refund", cashFlowIdParameter, refundUserIdParameter, refundUserTypeIdParameter, noteParameter);
        }
    
        public virtual int txn_trade_payment_unfreeze(Nullable<long> cashFlowId)
        {
            var cashFlowIdParameter = cashFlowId.HasValue ?
                new ObjectParameter("CashFlowId", cashFlowId) :
                new ObjectParameter("CashFlowId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("txn_trade_payment_unfreeze", cashFlowIdParameter);
        }
    
        public virtual int txn_trade_third_party(Nullable<long> userId, Nullable<int> userTypeId, Nullable<int> tradeTypeId, Nullable<long> orderId, Nullable<int> paymentTypeId, Nullable<decimal> payment, string note, string pasword)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var tradeTypeIdParameter = tradeTypeId.HasValue ?
                new ObjectParameter("TradeTypeId", tradeTypeId) :
                new ObjectParameter("TradeTypeId", typeof(int));
    
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(long));
    
            var paymentTypeIdParameter = paymentTypeId.HasValue ?
                new ObjectParameter("PaymentTypeId", paymentTypeId) :
                new ObjectParameter("PaymentTypeId", typeof(int));
    
            var paymentParameter = payment.HasValue ?
                new ObjectParameter("Payment", payment) :
                new ObjectParameter("Payment", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var paswordParameter = pasword != null ?
                new ObjectParameter("Pasword", pasword) :
                new ObjectParameter("Pasword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("txn_trade_third_party", userIdParameter, userTypeIdParameter, tradeTypeIdParameter, orderIdParameter, paymentTypeIdParameter, paymentParameter, noteParameter, paswordParameter);
        }
    
        public virtual ObjectResult<txn_trade_topup_Result> txn_trade_topup(Nullable<long> userId, Nullable<int> userTypeId, Nullable<decimal> topupAmount, string note, Nullable<int> paymentTypeId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var topupAmountParameter = topupAmount.HasValue ?
                new ObjectParameter("TopupAmount", topupAmount) :
                new ObjectParameter("TopupAmount", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var paymentTypeIdParameter = paymentTypeId.HasValue ?
                new ObjectParameter("PaymentTypeId", paymentTypeId) :
                new ObjectParameter("PaymentTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<txn_trade_topup_Result>("txn_trade_topup", userIdParameter, userTypeIdParameter, topupAmountParameter, noteParameter, paymentTypeIdParameter);
        }
    }
}
